mads 1.9.3
     1 FFFF> 02E0-02E1> 00 20				run start
     2 							
     3 = D010						TRIG0 = $d010
     4 = D01A						COLBK = $d01a
     5 				;			AUDF1 = $d200
     6 				;			AUDC1 = $d201
     7 				;			AUDF2 = $d202
     8 = D203						AUDC2 = $d203
     9 				;			AUDF1 = 708
    10 				;			AUDF2 = 709
    11 				;			AUDC1 = 710
    12 				;			AUDC2 = 712
    13 = D300						PORTA = $d300
    14 = D40A						WSYNC = $d40a
    15
    16 				;			AUDC1TMP = $80
    17 				;			AUDC2TMP = $81
    18 				;			AUDV1TMP = $82
    19 				;			AUDV2TMP = $83
    20 							
    21 02E2						org $2000
    22 2000			start
    23 2000			MainLoop
    24 2000-2022> AD 10 D0				lda TRIG0			; load the status of the player 1 button into the accumulator 
    25 2003 D0 FB					bne MainLoop        ; if there is nothing pressed, dont read data
    26
    27 2005 AD 00 D3					lda PORTA
    28 2008 29 0E					and #%00001110
    29 200A C9 0A					cmp #%00001010
    30 200C D0 F2					bne MainLoop
    31 							
    32
    33 				/*
    34 							lda PORTA			; load the directional information of both joysticks into the accumulator
    35 							cmp #$80			; swap nibbles
    36 							rol
    37 							cmp #$80
    38 							rol
    39 							cmp #$80
    40 							rol
    41 							cmp #$80
    42 				 			rol
    43 							sta PORTATEMP
    44 							and #%11100000		; for now, we are only interested in our three signifier bits...	
    45
    46 							cmp #%00000000		; let us compare the accumulator to a value
    47 							beq REG0			; and jump to a register-loading function if the two are equal
    48 							cmp #%00100000		; let us compare the accumulator to a value
    49 							beq REG1			; and jump to a register-loading function if the two are equal
    50 							cmp #%01000000		; let us compare the accumulator to a value
    51 							beq REG2			; and jump to a register-loading function if the two are equal
    52 							cmp #%01100000		; let us compare the accumulator to a value
    53 							beq REG3			; and jump to a register-loading function if the two are equal
    54 							cmp #%10000000		; let us compare the accumulator to a value
    55 							beq REG4			; and jump to a register-loading function if the two are equal
    56
    57 							cmp #%10100000		; let us compare the accumulator to a value
    58 							beq REG5			; and jump to a register-loading function if the two are equal
    59 							jmp DontRead		; if it was a false value, jump back to the main loop
    60
    61 				REG0
    62 							lda PORTATEMP		; load the directional information of both joysticks into the accumulator
    63 							sta AUDC1TMP		; store the data in the audio control register of channel 0
    64 							jmp DontRead		; jump back to main loop and wait for next lot of data
    65
    66 				REG1
    67 							lda PORTATEMP		; load the directional information of both joysticks into the accumulator
    68 							sta AUDC2TMP		; store the data in the audio control register of channel 1
    69 							jmp DontRead		; jump back to main loop and wait for next lot of data
    70
    71 				REG2
    72 							ldx PORTATEMP		; load the directional information of both joysticks into the accumulator
    73 							lda Notes,x
    74 							sta AUDF1			; store the data in the audio frequency register of channel 0
    75 							jmp DontRead		; jump back to main loop and wait for next lot of data
    76
    77 				REG3
    78 							ldx PORTATEMP		; load the directional information of both joysticks into the accumulator
    79 							lda Notes,x
    80 							sta AUDF2			; store the data in the audio frequency register of channel 1
    81 							jmp DontRead		; jump back to main loop and wait for next lot of data
    82
    83 				REG4
    84 				          	lda PORTATEMP		; load the directional information of both joysticks into the accumulator
    85 							and #%00001111
    86 							ora #%00010000
    87 							sta AUDC1			; store the data in the audio volume register of channel 0
    88 							sta 710
    89 							jmp DontRead		; jump back to main loop and wait for next lot of data
    90
    91 				REG5
    92 							lda PORTATEMP		; load the directional information of both joysticks into the accumulator
    93 							and #%00001111
    94 				*/
    94
    95 200E AD 00 D3					lda PORTA
    96 2011 4A						lsr
    97 2012 4A						lsr
    98 2013 4A						lsr
    99 2014 4A						lsr
   100 2015 09 10					ora #%00010000
   101 2017 8D 03 D2					sta AUDC2			; store the data in the audio volume register of channel 1
   102 201A 8D 1A D0					sta COLBK
   103 201D 8D 0A D4					sta WSYNC
   104
   105
   106 2020			DontRead
   107 2020 4C 00 20					jmp  MainLoop		; jump back to main loop and wait for next lot of data
   108
   109 				/*
   110 				Notes		.byte 243, 230, 217, 204, 193, 182, 172, 162, 153, 144, 136, 128, 121, 114, 108, 102, 96, 91, 85, 81, 76, 72, 68, 64, 60, 57, 53, 50, 47, 45, 42, 40, 37, 35, 33, 31, 30, 28, 26, 25, 23, 22, 21, 19, 18, 17, 16, 15, 14
   111
   112 				PORTATEMP	.byte 0
   113 				*/
   113
